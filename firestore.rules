rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (
        isOwner(userId) && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Locations collection
    match /locations/{locationId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin()
      );
    }
  }
} 